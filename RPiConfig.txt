Raspberry Pi configuration to build an access server
1. Update the operating system and software
  sudo apt-get update
  sudo apt-get upgrade
  sudo reboot
  
2. Install the Python dev package
  sudo apt-get install python-dev
  
3. Enable SPI on the system
  sudo nano /etc/modprobe.d/raspi-blacklist.conf
  Comment line with spi-bcm2708 (add # at the beginning of the line)
  Save (Ctrl+o) and quit (Ctrl+x) nano editor
  sudo nano /boot/config.txt
  Add the following line at the end of the file: dtparam=spi=on
  Save (Ctrl+o) and quit (Ctrl+x) nano editor
  
4. Reboot (again)
  sudo reboot
  
5. Validate SPI enabling 
  lsmod
  Check that spi_bcm2708 is there

6. Install the Python SpiDev module  
  mkdir python-spi
  cd python-spi
  wget https://raw.github.com/doceme/py-spidev/master/setup.py
  wget https://raw.github.com/doceme/py-spidev/master/spidev_module.c
  wget https://raw.github.com/doceme/py-spidev/master/README.mb
  wget https://raw.github.com/doceme/py-spidev/master/CHANGELOG.mb 
  sudo python setup.py install
  
7. Install the MySQL module for Python
  sudo apt-get install python-mysqldb
  
8. Check Python GPIO module (preinstalled on latest raspbian)
  In Idle for Python 2.7 type: import RPi.GPIO
  Nothing should happen

9. Install svn
  sudo apt-get install subversion

10. Pull the source code for the pi-access-server from Github.
  svn export https://github.com/david-beaudette/pi-access-server/trunk/ ~/pi-access-server

11. Install the radio library in Python path
  sudo mv ~/pi-access-server/lib_nrf24/lib_nrf24.py /usr/lib/python2.7/dist-packages/

12. Copy the task scripts to home folder.
  sudo mv ~/pi-access-server/piaccessserver/piaccessserver_tasks.sh /home/pi
  sudo mv ~/pi-access-server/piaccessserver/new_logs.sh /home/pi

13. Configure cron to launch server functions at regular intervals
  sudo crontab -e
  You should see the following header. 
  Type the lines at the bottom, save (Ctrl+o) and quit (Ctrl+x) nano editor.
  This will make the server update all commutators every 5 minutes, and new log files will be created each day.
  
# Edit this file to introduce tasks to be run by cron.
#
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
#
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').#
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
#
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
#
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
#
# For more information see the manual pages of crontab(5) and cron(8)
#
# m h  dom mon dow   command
SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
*/5 * * * * /home/pi/piaccessserver_tasks.sh >/home/pi/cronlog.txt 2>&1
3 0 * * * /home/pi/new_logs.sh >/home/pi/cronlog.txt 2>&1

14. Change the RPi hostname (hostnames are managed in a LibreOffice spreadsheet)
  Follow steps described in http://www.howtogeek.com/167195/how-to-change-your-raspberry-pi-or-other-linux-devices-hostname/

15. Install the avahi-daemon network tool (http://www.howtogeek.com/167190/how-and-why-to-assign-the-.local-domain-to-your-raspberry-pi/)
  sudo apt-get install avahi-daemon
  Y
  If you are going to communicate with the RPi from a Windows machine, follow the link to download the Apple Bonjour software to resolve fabpiXXX.local
  
16. Configure the access server parameters in the config file (settings are managed in a LibreOffice spreadsheet)
  cd ~/pi-access-server
  nano ~/pi-access-server/piaccessserver/piaccessserver.ini
  Edit parameters
  Save (Ctrl+o) and quit (Ctrl+x) nano editor
  
17. Reboot





